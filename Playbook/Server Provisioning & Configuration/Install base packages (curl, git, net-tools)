📋 Ansible Playbook: Install Base Packages-

# install_base_packages.yml

- name: Install essential base packages
  hosts: all
  become: true

  vars:
    base_packages:
      - curl
      - git
      - net-tools

  tasks:
    - name: Detect OS family
      ansible.builtin.set_fact:
        is_debian: "{{ ansible_os_family == 'Debian' }}"
        is_redhat: "{{ ansible_os_family == 'RedHat' }}"

    - name: Update apt cache (Debian)
      apt:
        update_cache: true
      when: is_debian

    - name: Install packages on Debian
      apt:
        name: "{{ base_packages }}"
        state: present
      when: is_debian

    - name: Install packages on RedHat
      yum:
        name: "{{ base_packages }}"
        state: present
      when: is_redhat

✅ Run It Like This-

ansible-playbook -i inventory.ini install_base_packages.yml

✅ You can modify base_packages in the vars: section, or override it dynamically like:

ansible-playbook install_base_packages.yml -e "base_packages=['htop','wget']"


📋 Explaination of the Above Playbook-

📂 High-Level Structure: What This Playbook Does?

This playbook is designed to install three widely used Linux utilities — curl, git, and net-tools.
Across both Debian and RedHat family systems using their native package managers (apt and yum). 
It uses dynamic detection to ensure the correct commands run on the right OS.

🔍 Step-by-Step Explanation-

🏁 1. Play Definition

yaml

- name: Install essential base packages
  hosts: all
  become: true

name: Human-readable label shown in playbook output — helpful for debugging.
hosts: Targets all hosts from your inventory file (e.g., inventory.ini).
become: true Tells Ansible to use sudo to run tasks — required for package installation.

🛠️ 2. Variables Section-

yaml

vars:
  base_packages:
    - curl
    - git
    - net-tools

Declares a YAML list (base_packages) of packages to install.
You could later override these with -e when running the playbook:

bash

ansible-playbook playbook.yml -e "base_packages=['htop','wget']"

🧠 3. OS Detection Logic-

yaml

- name: Detect OS family
  ansible.builtin.set_fact:
    is_debian: "{{ ansible_os_family == 'Debian' }}"
    is_redhat: "{{ ansible_os_family == 'RedHat' }}"

ansible_os_family is a fact auto-gathered by Ansible from the target system.
set_fact creates two boolean flags (is_debian, is_redhat) that are used to control task execution.
This makes the playbook cross-platform, instead of hardcoding apt or yum.

📦 4. Install Packages on Debian Systems-

a. Update Package Index-

yaml

- name: Update apt cache (Debian)
  apt:
    update_cache: true
  when: is_debian

apt update equivalent: refreshes package lists so the latest versions can be installed.
when: is_debian ensures this task runs only if the system is Debian-based.

b. Install Packages

yaml

- name: Install packages on Debian
  apt:
    name: "{{ base_packages }}"
    state: present
  when: is_debian

Installs packages listed in base_packages.
state: present means install if not already installed; doesn't force update.

📦 5. Install Packages on RedHat Systems-

yaml

- name: Install packages on RedHat
  yum:
    name: "{{ base_packages }}"
    state: present
  when: is_redhat

Uses yum instead of apt.
Same package list reused thanks to variable abstraction.
The when: conditional keeps it OS-safe.

💎 Bonus Enhancements You Could Add-

package: is an abstraction layer — it picks the correct backend (yum, dnf, apt) automatically on most systems.

🛡️ Optional Upgrade: Use package: module

🧠 Want to Make It Future-Proof?
If you're planning for future-proofing across RPM-based systems (RHEL, CentOS, Fedora), try this:

yaml

- name: Install packages on RedHat using package module
  package:
    name: "{{ base_packages }}"
    state: present
  when: is_redhat

package: automatically chooses the right backend (yum or dnf) based on the system. Clean and flexible.

📦 Refactored Playbook: Using package Module

yaml

# install_base_packages.yml

- name: Install essential base packages
  hosts: all
  become: true

  vars:
    base_packages:
      - curl
      - git
      - net-tools

  tasks:
    - name: Detect OS family
      ansible.builtin.set_fact:
        is_debian: "{{ ansible_os_family == 'Debian' }}"
        is_redhat: "{{ ansible_os_family == 'RedHat' }}"

    - name: Update package cache (Debian)
      apt:
        update_cache: true
      when: is_debian

    - name: Install packages generically using 'package' module
      package:
        name: "{{ base_packages }}"
        state: present
      when: is_debian or is_redhat







